<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Adam Faris</title>
    <link>https://amf3.github.io/categories/go/</link>
    <description>Recent content in Go on Adam Faris</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Sep 2025 17:17:10 -0400</lastBuildDate>
    <atom:link href="https://amf3.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go CLIs: Creating Subcommands and Flags</title>
      <link>https://amf3.github.io/articles/code/go/cli_args/</link>
      <pubDate>Mon, 29 Sep 2025 17:17:10 -0400</pubDate>
      <guid>https://amf3.github.io/articles/code/go/cli_args/</guid>
      <description>Using urfave/cli to create polished CLI applications</description>
      <content:encoded><![CDATA[<h2 id="adding-subcommands-to-go-clis">Adding Subcommands to Go CLIs</h2>
<p>Command Line Interfaces (CLIs) use subcommands and flags to enable different program features.  A
subcommand is a grouping of related features, and flags are options for controlling those features.  The openssl
command provides a great example of subcommands and flags. <code>openssl rand -base64 8</code> will generate 8 random bytes of
data with hexadecimal output.  The subcommand is &ldquo;rand&rdquo; and &ldquo;-base64&rdquo; is the flag.  Other openssl subcommands
like &ldquo;s_client&rdquo; or &ldquo;x509&rdquo;, provide different features and each has their own options.</p>
<p>When running the openssl command, the shell passes each space separated value into an argument list.  It&rsquo;s possible to
parse the list by checking if the second value is a subcommand, then looping over the rest to figure out
which are flags.  Some programs like <code>git</code> take this further by treating subcommands as seperate executables.
<code>git status</code> actually runs the <code>git-status</code> command in a subshell.  The approach works but keeping help output and
flag parsing consistent between executables gets messy.</p>
<p>Fortunately several libraries are available to make subcommands and flags easier to manage.  The one that I finally chose is <a href="https://cli.urfave.org">urfave/cli</a> which offers a builder style API.  The examples below use
version 3 of the library which can be imported as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/urfave/cli/v3&#34;</span>
</span></span></code></pre></div><h2 id="urfavecli-with-flags">urfave/cli with flags</h2>
<p>This is how simple the urfave/cli library is to use. I configure a <a href="https://pkg.go.dev/github.com/urfave/cli#Command">cli.Command</a>
struct, then call <a href="https://pkg.go.dev/github.com/urfave/cli#App.Run">Run()</a> to execute it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">...</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">goes</span> <span style="color:#a6e22e">here</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>So what does the struct inside cli.Command look like? It&rsquo;s a slice of <a href="https://pkg.go.dev/github.com/urfave/cli#Flag">Flag</a> interfaces.
allowing us to freely mix different flag types like
<a href="https://pkg.go.dev/github.com/urfave/cli#StringFlag">StringFlag</a>, <a href="https://pkg.go.dev/github.com/urfave/cli#BoolFlag">BoolFlag</a>,
or <a href="https://pkg.go.dev/github.com/urfave/cli#IntFlag">IntFlag</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>    <span style="color:#a6e22e">Flags</span>: []<span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Flag</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">IntFlag</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">BoolFlag</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    },
</span></span></code></pre></div><p>The other struct field is <a href="https://pkg.go.dev/github.com/urfave/cli/v3#ActionFunc">Action</a> which runs a function after parsing the flags.
The function can either be inline or passed as a reference. Here is an inline example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>    <span style="color:#a6e22e">Action</span>: <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#e6db74">&#34;hello&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">hello</span>(<span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;name&#34;</span>), <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Int</span>(<span style="color:#e6db74">&#34;count&#34;</span>))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>    },
</span></span></code></pre></div><p>This is what my populated main() looks like.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Flags</span>: []<span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Flag</span>{
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">BoolFlag</span>{
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:     <span style="color:#e6db74">&#34;hello&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Required</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:    <span style="color:#e6db74">&#34;Will greet a person with &#39;Hello&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">BoolFlag</span>{
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:     <span style="color:#e6db74">&#34;goodbye&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Required</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:    <span style="color:#e6db74">&#34;Will tell a person &#39;Goodbye&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">IntFlag</span>{
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:     <span style="color:#e6db74">&#34;count&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:    <span style="color:#e6db74">&#34;How many times to invoke function&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Required</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Value</span>:    <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">StringFlag</span>{
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:     <span style="color:#e6db74">&#34;name&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:    <span style="color:#e6db74">&#34;Tell me your name&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Required</span>: <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// &lt;- throws an error and prints help statement if name is not defined</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Action</span>: <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#e6db74">&#34;hello&#34;</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">hello</span>(<span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;name&#34;</span>), <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Int</span>(<span style="color:#e6db74">&#34;count&#34;</span>))
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>A complete working example using flags can be <a href="./assets/flag_example.go">downloaded</a>.</p>
<h3 id="flags-demo">Flags Demo</h3>
<p>When invoked without the &ndash;name flag which is marked required, urfave/cli will throw an error and print the help statement.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ go run flag_example.go --count <span style="color:#ae81ff">2</span> --hello 
</span></span><span style="display:flex;"><span>NAME:
</span></span><span style="display:flex;"><span>   flag_example - A new cli application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>USAGE:
</span></span><span style="display:flex;"><span>   flag_example
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OPTIONS:
</span></span><span style="display:flex;"><span>   --hello        Will greet a person with <span style="color:#e6db74">&#39;Hello&#39;</span> <span style="color:#f92672">(</span>default: false<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   --goodbye      Will tell a person <span style="color:#e6db74">&#39;Goodbye&#39;</span> <span style="color:#f92672">(</span>default: false<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   --count int    How many times to invoke <span style="color:#66d9ef">function</span> <span style="color:#f92672">(</span>default: 1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   --name string  Tell me your name
</span></span><span style="display:flex;"><span>   --help, -h     show help
</span></span><span style="display:flex;"><span>2025/10/02 08:36:19 Required flag <span style="color:#e6db74">&#34;name&#34;</span> not set
</span></span><span style="display:flex;"><span>exit status <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Adding the &ndash;name flag results in it working as expected.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ go run flag_example.go --count <span style="color:#ae81ff">2</span> --hello --name Adam
</span></span><span style="display:flex;"><span>Hello Adam
</span></span><span style="display:flex;"><span>Hello Adam
</span></span></code></pre></div><h2 id="urfavecli-with-subcommands">urfave/cli with subcommands</h2>
<p>Subcommands are added in a similar way, except instead of using a slice of Flag, we are using a slice of
Command which I described above.  Instead of using &ndash;hello or &ndash;goodbye as a flag, this example creates the
hello and goodbye subcommands.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hello</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Hello&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">goodbye</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Goodbye&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Commands</span>: []<span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>{
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:   <span style="color:#e6db74">&#34;hello&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:  <span style="color:#e6db74">&#34;Greets a person with &#39;Hello&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Action</span>: <span style="color:#a6e22e">hello</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:   <span style="color:#e6db74">&#34;goodbye&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:  <span style="color:#e6db74">&#34;Tells a person &#39;Goodbye&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Action</span>: <span style="color:#a6e22e">goodbye</span>,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="commands-demo">Commands Demo</h3>
<p>The autogenerated help statement when a subcommand isn&rsquo;t used.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ go run command_example.go
</span></span><span style="display:flex;"><span>NAME:
</span></span><span style="display:flex;"><span>   command_example - A new cli application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>USAGE:
</span></span><span style="display:flex;"><span>   command_example <span style="color:#f92672">[</span>global options<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>command <span style="color:#f92672">[</span>command options<span style="color:#f92672">]]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>COMMANDS:
</span></span><span style="display:flex;"><span>   hello    Greets a person with <span style="color:#e6db74">&#39;Hello&#39;</span>
</span></span><span style="display:flex;"><span>   goodbye  Tells a person <span style="color:#e6db74">&#39;Goodbye&#39;</span>
</span></span><span style="display:flex;"><span>   help, h  Shows a list of commands or help <span style="color:#66d9ef">for</span> one command
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>GLOBAL OPTIONS:
</span></span><span style="display:flex;"><span>   --help, -h  show help
</span></span></code></pre></div><p>Invoking the goodbye subcommand</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ go run command_example.go goodbye
</span></span><span style="display:flex;"><span>Goodbye
</span></span></code></pre></div><h2 id="combining-flags-and-subcommands">Combining flags and subcommands</h2>
<p>Now that we know how flags and subcommands work, lets combine them to get that openssl like experience.
But this is the great part, because subcommands are a slice of Command, and we know that Command accepts
a slice of Flag, we already know how this works.  Simply define a Flag for each subcommand.</p>
<p>Here&rsquo;s an example where the hello subcommand supports a name flag and the goodbye subcommand supports a count flag.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Commands</span>: []<span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>{
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:   <span style="color:#e6db74">&#34;hello&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:  <span style="color:#e6db74">&#34;Greets a person with &#39;Hello&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Action</span>: <span style="color:#a6e22e">runIt</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Flags</span>: []<span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Flag</span>{
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">StringFlag</span>{
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">Name</span>:     <span style="color:#e6db74">&#34;name&#34;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">Usage</span>:    <span style="color:#e6db74">&#34;Tell me your name&#34;</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">Required</span>: <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// &lt;- throws an error and prints help statement if name is not defined</span>
</span></span><span style="display:flex;"><span>                    },
</span></span><span style="display:flex;"><span>                },
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Name</span>:   <span style="color:#e6db74">&#34;goodbye&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Usage</span>:  <span style="color:#e6db74">&#34;Tells a person &#39;Goodbye&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">Action</span>: <span style="color:#a6e22e">runIt</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">Flags</span>: []<span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Flag</span>{
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">IntFlag</span>{
</span></span><span style="display:flex;"><span>                            <span style="color:#a6e22e">Name</span>:     <span style="color:#e6db74">&#34;count&#34;</span>,
</span></span><span style="display:flex;"><span>                            <span style="color:#a6e22e">Usage</span>:    <span style="color:#e6db74">&#34;How many times to invoke function&#34;</span>,
</span></span><span style="display:flex;"><span>                            <span style="color:#a6e22e">Required</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>                            <span style="color:#a6e22e">Value</span>:    <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>                        },
</span></span><span style="display:flex;"><span>                    },
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>A complete example that combines flags and subcommands is available for <a href="./assets/combo_example.go">download</a>.</p>
<h3 id="combination-demo">Combination Demo</h3>
<p>Running the demo without any options</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ go run combo_example.go 
</span></span><span style="display:flex;"><span>NAME:
</span></span><span style="display:flex;"><span>   combo_example - A new cli application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>USAGE:
</span></span><span style="display:flex;"><span>   combo_example <span style="color:#f92672">[</span>global options<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>command <span style="color:#f92672">[</span>command options<span style="color:#f92672">]]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>COMMANDS:
</span></span><span style="display:flex;"><span>   hello    Greets a person with <span style="color:#e6db74">&#39;Hello&#39;</span>
</span></span><span style="display:flex;"><span>   goodbye  Tells a person <span style="color:#e6db74">&#39;Goodbye&#39;</span>
</span></span><span style="display:flex;"><span>   help, h  Shows a list of commands or help <span style="color:#66d9ef">for</span> one command
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>GLOBAL OPTIONS:
</span></span><span style="display:flex;"><span>   --help, -h  show help
</span></span></code></pre></div><p>Running the demo with a subcommand missing a required flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ go run combo_example.go hello                                                 
</span></span><span style="display:flex;"><span>NAME:
</span></span><span style="display:flex;"><span>   combo_example hello - Greets a person with <span style="color:#e6db74">&#39;Hello&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>USAGE:
</span></span><span style="display:flex;"><span>   combo_example hello
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OPTIONS:
</span></span><span style="display:flex;"><span>   --name string  Tell me your name
</span></span><span style="display:flex;"><span>   --help, -h     show help
</span></span><span style="display:flex;"><span>2025/10/05 09:33:19 Required flag <span style="color:#e6db74">&#34;name&#34;</span> not set
</span></span><span style="display:flex;"><span>exit status <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Running the demo successfully</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% go run combo_example.go hello --name Adam
</span></span><span style="display:flex;"><span>Hello Adam
</span></span></code></pre></div><h2 id="accessing-set-values">Accessing Set Values</h2>
<p>The urfave API offers several functions to access the set values, which are found in
online <a href="https://pkg.go.dev/github.com/urfave/cli/v3#pkg-index">documentation</a>.</p>
<p>These are the functions I find myself using:</p>
<ul>
<li><a href="https://pkg.go.dev/github.com/urfave/cli/v3#Command.Names">func (cmd *Command) Names() []string</a></li>
<li><a href="https://pkg.go.dev/github.com/urfave/cli/v3#Command.String">func (cmd *Command) String(name string) string</a></li>
<li><a href="https://pkg.go.dev/github.com/urfave/cli/v3#Command.Bool">func (cmd *Command) Bool(name string) bool</a></li>
<li><a href="https://pkg.go.dev/github.com/urfave/cli/v3#Command.Int">func (cmd *Command) Int(name string) int</a></li>
</ul>
<p>Let&rsquo;s go back to the earlier <em>combo</em> example using these CLI options <code>go run combo_example.go hello --name Adam</code>.
This is the code block used in the example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">runIt</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cli</span>.<span style="color:#a6e22e">Command</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Name</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;hello&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">hello</span>(<span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;name&#34;</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;goodbye&#34;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">goodbye</span>(<span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Int</span>(<span style="color:#e6db74">&#34;count&#34;</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Unknown command&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>I use cmd.Name to access the user provided subcommand.  To access user provided options (flags), use
cmd.String, cmd.Int, or cmd.Bool. Other variations like cmd.Int64 do exist. Check online documentation if needed.</p>
<h2 id="urfave-is-now-myfave">urfave is now myfave</h2>
<p>I started this post as a few notes for myself while learning <strong>urfave/cli</strong>, but it turned into a great reminder
of how flexible the library is.  It keeps command structure clear, couples help statements and actions to flags and subcommands,
resulting in polished CLIs.</p>
<p>If you&rsquo;re building a Go CLI and want a simple API for managing subcommands and options, give <strong>urfave/cli</strong> a try.
You&rsquo;ll spend more time thinking about command logic and less time manaaging subcommands or flag options.</p>
<p>I can be found on <a href="https://bsky.app/profile/af9.us">Bluesky</a> if you want to trade notes on building CLIs.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Go Generics: A Real World Use Case</title>
      <link>https://amf3.github.io/articles/code/go/real_world_generics/</link>
      <pubDate>Fri, 11 Jul 2025 21:11:43 -0700</pubDate>
      <guid>https://amf3.github.io/articles/code/go/real_world_generics/</guid>
      <description>Using Generics for Testing Pointers In Structs</description>
      <content:encoded><![CDATA[<p>Until recently, I haven&rsquo;t had many opportunities to use Go&rsquo;s generics.  I ran into
a case where generics make sense.  Best of all, this isn&rsquo;t a contrived example.</p>
<p>I&rsquo;m working on a project and using openAPI to generate API contracts.  One of the generated
structs contains optional fields implemented as pointers. The only required field is Name.</p>
<pre tabindex="0"><code>const (
	Gzip PostPailsCompression = &#34;gzip&#34;
	None PostPailsCompression = &#34;none&#34;
)

type PostPails struct {
	Compression *PostPailsCompression `json:&#34;compression,omitempty&#34;`

	// MaxArchiveSize Max size (bytes) before rotating to a new archive.
	MaxArchiveSize *int `json:&#34;max_archive_size,omitempty&#34;`

	// Name Name of the new pail
	Name string `json:&#34;name&#34;`
}
</code></pre><p>I need to populate the struct with values when writing unit tests. But dealing with pointers in Go
test code usually results in using temporary variables.  It&rsquo;s not bad, but there&rsquo;s some visual noise.</p>
<pre tabindex="0"><code>gzip := PostPailsCompression(&#34;gzip&#34;)
size := 1000000
payload := PostPails{
    Name: &#34;testpail&#34;
    Compression: &amp;gzip,
    MaxArchiveSize: &amp;size,
}
</code></pre><p>Implementing a helper function using generics, provides a much cleaner solution.</p>
<ul>
<li>The temporary variables are no longer needed.</li>
<li>Test code becomes much easier to read by naming the helper function ptr.</li>
</ul>
<pre tabindex="0"><code>func ptr[T any](v T) *T {
	return &amp;v
}

func TestPostPails_CreatesDirectory(t *testing.T) {
	tmpStorage := t.TempDir()
	server := NewServer(tmpStorage)

	payload := PostPails{
		Name:           &#34;testpail&#34;,
		Compression:    ptr(PostPailsCompression(&#34;gzip&#34;)),
		MaxArchiveSize: ptr(1000000),
        ... 
}
</code></pre><p>Let&rsquo;s discuss the ptr function.</p>
<ul>
<li>T is a type parameter and is a placeholder for any type.</li>
<li>The any constraint means T can be anything and is equivalent to interface{}.</li>
<li>Inside the function, we take a value v and return its pointer.</li>
</ul>
<hr>
<p>Using generics avoids the temporary variable pattern and provides a means to write cleaner test code.
The benefit becomes obvious when dealing with many optional fields.</p>
<p>Until now, generics didn&rsquo;t seem to be a feature I needed.  The examples I read about didn&rsquo;t feel relevant.  This one clicked because
it solved a real issue while writing unit tests.</p>
<p>Any thoughts or clever uses of Go generics? Drop me a line on <a href="https://bsky.app/profile/af9.us">Bluesky</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>OpenAPI in Practice: Go Server &#43; Python Client from Spec</title>
      <link>https://amf3.github.io/articles/api/hello_openapi/</link>
      <pubDate>Fri, 04 Jul 2025 22:43:09 -0700</pubDate>
      <guid>https://amf3.github.io/articles/api/hello_openapi/</guid>
      <description>A practical walkthrough of using OpenAPI to generate cross-language interfaces</description>
      <content:encoded><![CDATA[<p>OpenAPI is a specification for documenting HTTP APIs for both humans and machines to consume.  As OpenAPI is a specification,
it is language agnostic. OpenAPI relies on generators for translating the specification.  There&rsquo;s more
than just documentation that&rsquo;s generated. Generators also create language-specific interfaces, tooling, and contracts.  In some
ways the OpenAPI pattern reminds me of either protobuf with gRPC or ORM schema-first design.  As a result, a declarative API is
created by the tooling.</p>
<p>By the end of this post you&rsquo;ll have:</p>
<ul>
<li>A working Go http server generated from an OpenAPI specification.</li>
<li>A Python http client generated from the same specification and authenticates with basic auth.</li>
<li>Insight into common OpenAPI pitfalls and how to avoid them.</li>
</ul>
<pre tabindex="0"><code class="language-ascii" data-lang="ascii">[openapi.yaml]
     ↓
+--------------+
| oapi-codegen | ---&gt; [Go Server]
+--------------+
     ↓
+-----------------------+
| openapi-python-client | ---&gt; [Python Client]
+-----------------------+
</code></pre><p>If you would like to follow along, a complete code example can be <a href="./assets/hello_openapi.tar.gz"><strong>downloaded</strong></a> and extracted
into a temporary working directory.</p>
<h2 id="generators">Generators</h2>
<p>Because generators are consuming the specification, the OpenAPI version is determined by what the generators support.</p>
<p>For example, a popular Go generator is <a href="https://github.com/oapi-codegen/oapi-codegen">oapi-codegen</a> and supports
OpenAPI 3.0.  Where a popular Python generator named
<a href="https://github.com/openapi-generators/openapi-python-client">openapi-python-client</a> can support both OpenAPI 3.0 and 3.1 specifications.</p>
<p>Generators can be downloaded and managed as part of the languages tooling.  For Go, the oapi-codegen generator is managed with Go
modules and invoked with <code>go tool oapi-codegen</code>.  With Python, creating a virtual environment, using
pip install openapi-python-client, and pip freeze &gt; requirements.txt will work nicely.</p>
<h2 id="openapi-schema">OpenAPI Schema</h2>
<p>At first it wasn&rsquo;t clear to me on how to get started with OpenAPI or what the benefits were.  This is even after reviewing the
OpenAPI <a href="https://spec.openapis.org/oas/v3.0.3.html">schema documentation</a> for 3.0.3.</p>
<p>To get started one needs to create a specification.  A very minimal specification meeting the 3.0.x requirements is listed below.
It&rsquo;s not a very interesting example as endpoints in the application server aren&rsquo;t defined, but it shows how minimal a
specification can be that meets schema requirements.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">openapi</span>: <span style="color:#e6db74">&#34;3.0.3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">info</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">1.0.0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">title</span>: <span style="color:#ae81ff">My Contrived Server</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span></code></pre></div><p>Let&rsquo;s get started by extending the simple example defining a path named /status. It will return a 200 response code with a JSON resonse.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">/status</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">get</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">responses</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#39;200&#39;</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Get status of the application server</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">content</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">application/json</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/components/schemas/status&#39;</span>
</span></span></code></pre></div><p>The JSON response is documented in a separate YAML block named components. It defines the response containing a JSON
map containing the keys &ldquo;state&rdquo; and &ldquo;message&rdquo;, both of which have a string value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">components</span>: 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">schemas</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">status</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">state</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">example</span>: <span style="color:#e6db74">&#34;GOOD&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">message</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">example</span>: <span style="color:#e6db74">&#34;App running within parameters&#34;</span>
</span></span></code></pre></div><p>OpenAPI supports tags, which let you group related endpoints. This example creates a data grouping and puts create_bucket in the group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">data</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">description</span>:  <span style="color:#ae81ff">data manipulation endpoints</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">/create_bucket</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">post</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#ae81ff">data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">requestBody</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">required</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">content</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">application/json</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/components/schemas/create_bucket&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">responses</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#39;200&#39;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Create a storage object</span>
</span></span></code></pre></div><p>The OpenAPI specification also provides a definition for authentication to the web application.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">components</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">securitySchemes</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">basicAuth</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">http</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">scheme</span>: <span style="color:#ae81ff">basic</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Endpoints protected by basic auth base64 encoded credentials.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">/status</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">get</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">security</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">basicAuth</span>: []
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">responses</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#39;200&#39;</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">description</span>: <span style="color:#ae81ff">Get status of the application server</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">content</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">application/json</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">schema</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">$ref</span>: <span style="color:#e6db74">&#39;#/components/schemas/status&#39;</span>
</span></span></code></pre></div><p>Earlier I mentioned the generators will create interface files. Declarations which are considered middleware like
authentication or logging are out of scope for OpenAPI.
In this example, the security entries are there to document that the endpoints require basic authentication.</p>
<h2 id="generate-server-interfaces-go">Generate Server Interfaces (Go)</h2>
<p>The server walkthrough presumes one has both Make and Go installed, and the <a href="./assets/hello_openapi.tar.gz">example code</a> (tar.gz file)
has been downloaded and extracted into a temp/work directory.</p>
<ul>
<li>Download the Go dependencies, including oapi-codegen, by running <code>make tidy</code>.</li>
<li>Generate the server interfaces by running <code>make server-codegen</code>, which calls <code>go tool oapi-codegen</code>.</li>
</ul>
<p>Feel free to inspect the api/http.gen.go file before proceeding. You&rsquo;ll see it contains an interface named ServerInterface,
which has the GetStatus or PostStatus endpoints from the OpenAPI specification.  http.gen.go also contains a struct named Status
that was defined from components -&gt; schema -&gt; status.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Status</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Message</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;message&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">State</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;state&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To see the working application server, run <code>make server-run</code>.</p>
<p>The server has Basic Auth enabled with hardcoded credentials. The user is &ldquo;alice&rdquo; and the password &ldquo;mySecretPW&rdquo;.  Curl can be
used to see the response.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% curl --basic -u alice:mySecretPW  http://localhost:8080/status
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span><span style="color:#e6db74">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;Initializing&#34;</span>,<span style="color:#e6db74">&#34;state&#34;</span>:<span style="color:#e6db74">&#34;Unknown&#34;</span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="generate-client-interfaces-python">Generate Client Interfaces (Python)</h2>
<p>This is where OpenAPI really shines.  I was able to use a generator to create Python libraries
to be used by the client implementation code.  The walkthrough presumes a recent version of Python3 and pip are installed.</p>
<p>First, create a virtual environment and install the openapi-python-client dependencies.  This shell snippet
presumes the current working directory is already hello_openapi.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% python3 -mvenv $PWD/.venv
</span></span><span style="display:flex;"><span>% source $PWD/.venv/bin/activate
</span></span><span style="display:flex;"><span>% pip install -r requirements.txt
</span></span></code></pre></div><p>Then run <code>make client-codegen</code> to build the Python client libraries located in cmd/client/my_contrived_server.</p>
<p>Generating the client was easy, but figuring out how to pass authentication took some trial and error. I eventually
realized that the <code>token</code> is just a base64-encoded <code>username:password</code> string, and the <code>prefix</code> should be set to <code>Basic</code>.</p>
<pre tabindex="0"><code>client = AuthenticatedClient(
    base_url=&#34;http://127.0.0.1:8080&#34;,
    headers={&#34;Content-Type&#34;: &#34;application/json&#34;, &#34;Accept&#34;: &#34;application/json&#34;},
    token=&#34;YWxpY2U6bXlTZWNyZXRQVw==&#34;,  # Token string is a base64 string containing alice:mySecretPW
    prefix=&#34;Basic&#34;
)
</code></pre><p>To see the client in action, run <code>make client-run</code>.  Also take a look at cmd/client/client.py.  It
only took a few lines of python code to implement what the openapi-python-client generator had created.</p>
<h2 id="gotchas--lessons-learned">Gotchas &amp; Lessons Learned</h2>
<p>One issue I have with OpenAPI is the illusion of simplicty. When I first started working with OpenAPI, I noticed the Status struct
had keys referencing a pointer of strings which wasn&rsquo;t ideal.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Status</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Message</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;message&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">State</span>   <span style="color:#f92672">*</span><span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;state&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It took some fiddling with the OpenAPI specification to make the generator use strings instead of pointers to strings.
Adding &lsquo;required&rsquo; to the schema made the generator do what I wanted.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">components</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">status</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">type</span>: <span style="color:#ae81ff">object</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">properties</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">state</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">example</span>: <span style="color:#e6db74">&#34;GOOD&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">message</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">example</span>: <span style="color:#e6db74">&#34;App within parameters&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">state</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">message</span>
</span></span></code></pre></div><p>Another issue was not knowing that in Paths, GETs should have a <strong>responses</strong> entry and POSTS should have a <strong>RequestBody</strong> entry.
It makes sense, but it wasn&rsquo;t obvious to me when stumbling through hello-world.</p>
<p>The main takeaway? Always inspect the generated code. If something doesn’t look right, like unexpected pointers or missing method args,
chances are your spec needs tweaking.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Even though I hit some issues with a fairly simple example, I&rsquo;m going to continue using OpenAPI specifcations.  Being able to easily generate
client code in a different language was a real win. And let&rsquo;s not forget the free API documentation and contract definitions which comes with OpenAPI.
I have a more complex OpenAPI project coming up. I&rsquo;m sure I&rsquo;ll have more notes (and probably more gotchas) to share.  Stay tuned.</p>
<p>If you&rsquo;ve had similar struggles with OpenAPI or tips for improving schema design, I’d love to hear them on <a href="https://bsky.app/profile/af9.us">Bluesky Social</a>.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
